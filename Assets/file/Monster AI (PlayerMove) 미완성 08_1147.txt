using UnityEngine;
using UnityEngine.AI;

public class MonsterAI : MonoBehaviour
{
    public Transform player;
    public float detectionRange = 10f;
    public float attackRange = 2f;
    public float attackCooldown = 1.5f;

    private NavMeshAgent agent;
    private Animator animator;

    private enum State { Idle, Chase, Attack, Groggy } // 상태에 Groggy 추가
    private State currentState = State.Idle;

    private float lastAttackTime = -999f;

    private float groggyTime = 2f; // 그로기 지속 시간
    private bool isGroggy = false;


    void Start()
    {
        agent = GetComponent<NavMeshAgent>();
        animator = GetComponent<Animator>();
    }

    void Update()
    {
        if (isGroggy || currentState == State.Attack || currentState == State.Idle)
        {
            agent.isStopped = true;
        }
        else
        {
            agent.isStopped = false;
        }

        if (isGroggy) return;

        float distance = Vector3.Distance(transform.position, player.position);

        switch (currentState)
        {
            case State.Idle:
                HandleIdle(distance);
                break;

            case State.Chase:
                HandleChase(distance);
                break;

            case State.Attack:
                HandleAttack(distance);
                break;
        }
    }

    void HandleIdle(float distance)
    {
        animator.SetBool("isWalking", false);

        if (distance < detectionRange)
        {
            currentState = State.Chase;
            animator.SetBool("isWalking", true);
        }
    }

    void HandleChase(float distance)
    {
        if (distance > detectionRange)
        {
            currentState = State.Idle;
            agent.ResetPath();
            return;
        }

        // 플레이어를 향해 회전
        Vector3 dir = (player.position - transform.position).normalized;
        dir.y = 0f;
        transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(dir), Time.deltaTime * 5f);

        if (distance > attackRange)
        {
            agent.SetDestination(player.position);
            animator.SetBool("isWalking", true);
        }
        else
        {
            agent.ResetPath();
            animator.SetBool("isWalking", false);
            currentState = State.Attack;
        }
    }

    void HandleAttack(float distance)
    {
        transform.LookAt(new Vector3(player.position.x, transform.position.y, player.position.z));

        if (distance > attackRange)
        {
            currentState = State.Chase;
            return;
        }

        if (Time.time - lastAttackTime >= attackCooldown)
        {
            animator.SetTrigger("attack");
            lastAttackTime = Time.time;
        }
    }
    public void EnterGroggy()
    {
        if (isGroggy) return;

        isGroggy = true;
        currentState = State.Groggy;
        agent.ResetPath(); // 이동 중지
        animator.SetTrigger("groggy"); // groggy 애니메이션 트리거
        StartCoroutine(GroggyRecover());
    }

    private System.Collections.IEnumerator GroggyRecover()
    {
        yield return new WaitForSeconds(groggyTime);
        isGroggy = false;
        currentState = State.Idle; // 다시 idle 상태로 복귀
    }


}
